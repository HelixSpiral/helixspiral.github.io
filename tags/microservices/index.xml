<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>microservices on Helix&#39;s Blog</title>
    <link>https://helixspiral.github.io/tags/microservices/</link>
    <description>Recent content in microservices on Helix&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://helixspiral.github.io/tags/microservices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multi-arch Docker builds with Rust</title>
      <link>https://helixspiral.github.io/posts/2023-06-16-rust-multiarch-docker/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2023-06-16-rust-multiarch-docker/</guid>
      <description>Introduction I&amp;rsquo;ve recently been playing with some Rust projects, and one of the biggest struggles I had was getting a small platform agnostic Docker image that I could use to build any platform using docker buildx.
The code I wrote a very small program that spits out a random number along with the current architecture to use as an sample for our Docker work.
use rand::Rng; use current_platform::CURRENT_PLATFORM; fn main() { let mut rng = rand::thread_rng(); let r_num: u8 = rng.</description>
    </item>
    
    <item>
      <title>Astronomy Picture of the Day Notification Service</title>
      <link>https://helixspiral.github.io/posts/2022-07-26-astronomy-picture-of-the-day-notification-service/</link>
      <pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2022-07-26-astronomy-picture-of-the-day-notification-service/</guid>
      <description>Overview In this blog we&amp;rsquo;ll cover how the Astronomy Picture of the Day microservices are built and deployed with Docker and Kubernetes, and how to deploy the lightweight MQTT broker Mosquitto.
This is a follow up to my previous blog post System Scalability and Microservices with some additional information.
Requirements Docker installed locally Working Kubernetes cluster Helm installed GitHub repositories All of the code relating to this blog post can be found at the following links and is released under the GPL-3.</description>
    </item>
    
    <item>
      <title>System Scalability and Microservices</title>
      <link>https://helixspiral.github.io/posts/2022-02-28-system-scalability-and-microservices/</link>
      <pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2022-02-28-system-scalability-and-microservices/</guid>
      <description>Overview This blog will talk about system scalability with relation to microservices and how a monolithic application would be less desired in this example.
GitHub repositories All of the code relating to this blog post can be found at the following links and is released under the GPL-3.0 license, with the exception of the official NASA api which is released under the Apache-2.0 license.
Official NASA APOD API - The official NASA API for getting the Astronomy Picture of the Day.</description>
    </item>
    
  </channel>
</rss>
