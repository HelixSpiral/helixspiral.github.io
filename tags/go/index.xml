<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Helix&#39;s Blog</title>
    <link>https://helixspiral.github.io/tags/go/</link>
    <description>Recent content in go on Helix&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://helixspiral.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Environment Configurable vs Environment Agnostic Applications</title>
      <link>https://helixspiral.github.io/posts/2023-09-27-environment-configurable-vs-environment-agnostic-applications/</link>
      <pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2023-09-27-environment-configurable-vs-environment-agnostic-applications/</guid>
      <description>Introduction As a member of an operations team you want things to be easy, you want things to &amp;ldquo;just work&amp;rdquo; the same way in a testing environment as they do in a production one. In this post we&amp;rsquo;ll cover applications that need to be configured, and how to remove those needed configurations in favor of an application that &amp;ldquo;just works&amp;rdquo;.
Environment configurable Here is our example environment configurable application:
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.</description>
    </item>
    
    <item>
      <title>Astronomy Picture of the Day Notification Service</title>
      <link>https://helixspiral.github.io/posts/2022-07-26-astronomy-picture-of-the-day-notification-service/</link>
      <pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2022-07-26-astronomy-picture-of-the-day-notification-service/</guid>
      <description>Overview In this blog we&amp;rsquo;ll cover how the Astronomy Picture of the Day microservices are built and deployed with Docker and Kubernetes, and how to deploy the lightweight MQTT broker Mosquitto.
This is a follow up to my previous blog post System Scalability and Microservices with some additional information.
Requirements Docker installed locally Working Kubernetes cluster Helm installed GitHub repositories All of the code relating to this blog post can be found at the following links and is released under the GPL-3.</description>
    </item>
    
    <item>
      <title>System Scalability and Microservices</title>
      <link>https://helixspiral.github.io/posts/2022-02-28-system-scalability-and-microservices/</link>
      <pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2022-02-28-system-scalability-and-microservices/</guid>
      <description>Overview This blog will talk about system scalability with relation to microservices and how a monolithic application would be less desired in this example.
GitHub repositories All of the code relating to this blog post can be found at the following links and is released under the GPL-3.0 license, with the exception of the official NASA api which is released under the Apache-2.0 license.
Official NASA APOD API - The official NASA API for getting the Astronomy Picture of the Day.</description>
    </item>
    
    <item>
      <title>Ensuring backwards compatibility in deployments by leveraging git tags</title>
      <link>https://helixspiral.github.io/posts/2021-04-02-using-git-tags-to-ensure-deployment-backwards-compability/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2021-04-02-using-git-tags-to-ensure-deployment-backwards-compability/</guid>
      <description>Overview I recently came across a blog post on injecting variables into Golang at build time and that gave me the idea for this blog post. Automating versioning and ensuring backwards compatibility.
GitHub repository and sample application You can find the code for this application here, on my GitHub
Git tags and versioning This blog post assumes some basic understanding of the git version control system. For anyone new to it you can probably get by with thinking that commits are incremental changes to the software and tags are user-created labels that reference a specific commit.</description>
    </item>
    
  </channel>
</rss>
