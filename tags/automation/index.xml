<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>automation on Helix&#39;s Blog</title>
    <link>https://helixspiral.github.io/tags/automation/</link>
    <description>Recent content in automation on Helix&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://helixspiral.github.io/tags/automation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chicken Coop Update [January 2025]</title>
      <link>https://helixspiral.github.io/posts/2025-01-02-chicken-coop-tech-update/</link>
      <pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2025-01-02-chicken-coop-tech-update/</guid>
      <description>Overview This is an update to a blog post I did in January of 2024 titled Chicken Coop Tech1.
I&amp;rsquo;m behind where I wanted to be in terms of getting this system user-friendly and open source, but I still think I&amp;rsquo;m making some good progress and wanted to share an update over the changes I&amp;rsquo;ve made.
Architecture Components Hardware:
Sensecap S210X temp/humidity/co2 sensors - Take readings and sends out LoRaWAN packets Helium hotspot - Reads incoming LoRaWAN packets and sends data to the Helium Console Software:</description>
    </item>
    
    <item>
      <title>Automated certificate management in local Kubernetes clusters, with local domains</title>
      <link>https://helixspiral.github.io/posts/2024-12-19-kubernetes-tls-certificates-with-local-domains/</link>
      <pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2024-12-19-kubernetes-tls-certificates-with-local-domains/</guid>
      <description>Overview / Requirements / Setup After setting up external-dns and cert-manager for the hundreth time I thought it&amp;rsquo;d be fun to add some functionality to my homelab cluster and have proper signed certs there. This blog post is a basic outline of how to setup cert-manager to sign certificates using a certificate and key provided from an intermediary CA.
I&amp;rsquo;m using pfSense to both provide DNS to my .lan domain and generate the root and intermediary CA certs, you can use whatever platform you&amp;rsquo;d like but the steps outlined here use pfSense.</description>
    </item>
    
    <item>
      <title>Chicken Coop Tech</title>
      <link>https://helixspiral.github.io/posts/2024-01-19-chicken-coop-tech/</link>
      <pubDate>Fri, 19 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2024-01-19-chicken-coop-tech/</guid>
      <description>Overview Over the end of year 2023 Holidays I had a vacation and started working on revamping some tech for my chicken coop. This blog post is going to detail what we had initially, what I&amp;rsquo;m building, and some future ideas for the chicken tech.
Equipment/Software Used Original Helium Hotspot - Any official Helium Hotspot1 or home-built Data-Only2 hotspot will work SenseCAP 2103 (2)3 - LoRaWAN Temp, Humidity, and CO2 Sensor Raspberry PI 4b 8GB (2) - Local k8s cluster running in my home Helium Console4 - Helium Network console provided by the Helium Foundation, but any Helium-compatible console will work SenseCAP-Decoder5 - Javascript function for decoding 210X sensors provided by SenseCAP.</description>
    </item>
    
    <item>
      <title>Multi-arch Docker builds with Rust</title>
      <link>https://helixspiral.github.io/posts/2023-06-16-rust-multiarch-docker/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2023-06-16-rust-multiarch-docker/</guid>
      <description>Introduction I&amp;rsquo;ve recently been playing with some Rust projects, and one of the biggest struggles I had was getting a small platform agnostic Docker image that I could use to build any platform using docker buildx.
The code I wrote a very small program that spits out a random number along with the current architecture to use as an sample for our Docker work.
use rand::Rng; use current_platform::CURRENT_PLATFORM; fn main() { let mut rng = rand::thread_rng(); let r_num: u8 = rng.</description>
    </item>
    
    <item>
      <title>Astronomy Picture of the Day Notification Service</title>
      <link>https://helixspiral.github.io/posts/2022-07-26-astronomy-picture-of-the-day-notification-service/</link>
      <pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2022-07-26-astronomy-picture-of-the-day-notification-service/</guid>
      <description>Overview In this blog we&amp;rsquo;ll cover how the Astronomy Picture of the Day microservices are built and deployed with Docker and Kubernetes, and how to deploy the lightweight MQTT broker Mosquitto.
This is a follow up to my previous blog post System Scalability and Microservices with some additional information.
Requirements Docker installed locally Working Kubernetes cluster Helm installed GitHub repositories All of the code relating to this blog post can be found at the following links and is released under the GPL-3.</description>
    </item>
    
    <item>
      <title>System Scalability and Microservices</title>
      <link>https://helixspiral.github.io/posts/2022-02-28-system-scalability-and-microservices/</link>
      <pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2022-02-28-system-scalability-and-microservices/</guid>
      <description>Overview This blog will talk about system scalability with relation to microservices and how a monolithic application would be less desired in this example.
GitHub repositories All of the code relating to this blog post can be found at the following links and is released under the GPL-3.0 license, with the exception of the official NASA api which is released under the Apache-2.0 license.
Official NASA APOD API - The official NASA API for getting the Astronomy Picture of the Day.</description>
    </item>
    
    <item>
      <title>Ensuring backwards compatibility in deployments by leveraging git tags</title>
      <link>https://helixspiral.github.io/posts/2021-04-02-using-git-tags-to-ensure-deployment-backwards-compability/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2021-04-02-using-git-tags-to-ensure-deployment-backwards-compability/</guid>
      <description>Overview I recently came across a blog post on injecting variables into Golang at build time and that gave me the idea for this blog post. Automating versioning and ensuring backwards compatibility.
GitHub repository and sample application You can find the code for this application here, on my GitHub
Git tags and versioning This blog post assumes some basic understanding of the git version control system. For anyone new to it you can probably get by with thinking that commits are incremental changes to the software and tags are user-created labels that reference a specific commit.</description>
    </item>
    
    <item>
      <title>Automating Kubernetes with Saltstack</title>
      <link>https://helixspiral.github.io/posts/2020-10-13-automating-kubernetes-with-saltstack/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helixspiral.github.io/posts/2020-10-13-automating-kubernetes-with-saltstack/</guid>
      <description>Overview My goal for this project was to setup and manage a Kubernetes cluster using Saltstack, the idea being that since I wanted to learn them both if I could automate the setup of the cluster I&amp;rsquo;d be killing two birds with one stone.
I found a few good blog posts on this but all the ones I found lacked the level of automation I was looking for, some had hard coded values and others had manual commands needing to be run on the minions.</description>
    </item>
    
  </channel>
</rss>
